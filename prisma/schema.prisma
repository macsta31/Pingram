generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String             @id @default(uuid())
  name              String
  apiKey            String
  createdAt         DateTime           @default(now())
  customers         Customer[]
  reminders         Reminder[]
  sequences         Sequence[]
  sequenceTemplates SequenceTemplate[]
  templates         Template[]
}

model Customer {
  id          String     @id @default(uuid())
  accountId   String
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  externalId  String
  createdAt   DateTime   @default(now())
  account     Account    @relation(fields: [accountId], references: [id])
  reminders   Reminder[]
  sequences   Sequence[]
}

model Template {
  id            String         @id @default(uuid())
  accountId     String
  name          String
  content       String
  channels      String[]
  title         String
  reminders     Reminder[]
  sequenceSteps SequenceStep[]
  account       Account        @relation(fields: [accountId], references: [id])
}

model SequenceTemplate {
  id            String         @id @default(uuid())
  accountId     String
  name          String
  cancelOnEvent String?
  createdAt     DateTime       @default(now())
  sequences     Sequence[]
  steps         SequenceStep[]
  account       Account        @relation(fields: [accountId], references: [id])
}

model SequenceStep {
  id                 String           @id @default(uuid())
  sequenceTemplateId String
  order              Int
  delayMinutes       Int
  templateId         String?
  channels           String[]
  Reminder           Reminder[]       @relation("ReminderStep")
  sequenceTemplate   SequenceTemplate @relation(fields: [sequenceTemplateId], references: [id])
  template           Template?        @relation(fields: [templateId], references: [id])
}

model Sequence {
  id                 String           @id @default(uuid())
  accountId          String
  sequenceTemplateId String
  startAt            DateTime
  cancelledAt        DateTime?
  customerId         String
  reminders          Reminder[]
  account            Account          @relation(fields: [accountId], references: [id])
  customer           Customer         @relation(fields: [customerId], references: [id])
  sequenceTemplate   SequenceTemplate @relation(fields: [sequenceTemplateId], references: [id])
}

model Reminder {
  id         String        @id @default(uuid())
  sequenceId String
  customerId String
  accountId  String
  templateId String?
  sendAt     DateTime
  sentAt     DateTime?
  status     String
  jobId      String
  stepId     String?
  message    String?
  title      String?
  channels   String[]
  account    Account       @relation(fields: [accountId], references: [id])
  customer   Customer      @relation(fields: [customerId], references: [id])
  sequence   Sequence      @relation(fields: [sequenceId], references: [id])
  step       SequenceStep? @relation("ReminderStep", fields: [stepId], references: [id])
  template   Template?     @relation(fields: [templateId], references: [id])
}
